

    threadpool_t *p = pool_creation();

    hashtable_t *t = initTable( max_conn );

    checkin_arg *ar = ( checkin_arg *)malloc(sizeof( checkin_arg ) );
    ar->name = (char *)malloc( 20 * sizeof( char ) );
	ar->myt = t;

	for( int i = 0; i < 10; i++ )
	{
		printf( "inserisci\t" );
		gets( ar->name );
		threadpool_add( p, checkin, ar );
	}

	printf( "\n\n\n" );
	sleep( 2 );

	for( int i = 0; i < max_conn; i++ )
	{
		if( t->elem[i].nickname != NULL )
		{
			printf( "%s\n", t->elem[i].nickname );

			if( t->elem[i].collision != NULL )
			{
				node_t *n = t->elem[i].collision->head;
				while( n != NULL )
				{
					ht_elem_t *e = n->ptr;
					printf( "\t\t%s\n", e->nickname );
					n = n->next;
				}
			}
		}

	}

	for( int i = 0; i < 4; i++ )
	{
		printf( "\nrimuovi?\n" );
		gets( ar->name );


		printf( "%d\n",  delete( ar ) );


		for( int i = 0; i < max_conn; i++ )
		{
			if( t->elem[i].nickname != NULL )
			{
				printf( "%s\n", t->elem[i].nickname );

				if( t->elem[i].collision != NULL )
				{
					node_t *n = t->elem[i].collision->head;
					while( n != NULL )
					{
						ht_elem_t *e = n->ptr;
						printf( "\t\t%s\n", e->nickname );
						n = n->next;
					}
				}
			}

		}
	}


    queue_t *myq = initialQueue();
    push( myq, "luca" );
    push( myq, "lucia" );
    push( myq, "luciano" );

    node_t *tmp = myq->head;
    while( tmp != NULL )
    {
    	printf( "ORIGINAL: %s\t", tmp->ptr );
    	tmp = tmp->next;
    }

    printf("\n\n\nOUT: %s\n\n", pull( myq ) );

    tmp = myq->head;
    while( tmp != NULL )
	{
		printf( "LAST: %s\t", tmp->ptr );
		tmp = tmp->next;
	}
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	//    	new_client = accept( listener, NULL, 0 );
//    	if( new_client != -1 )
//    	{
//    		con.con_fd = new_client;
//    		con.users = users;
//    		threadpool_add( pool, connections_handler, &con );
//    	}
//    	else
//    	{
//    		fprintf( stderr, "ERROR ESTABLISHING CONNECTION\n");
//    		continue;
//    	}
//    }




//    hashtable_t *users = initTable( _MAX_CONN );

//    users->users[0].user = malloc( sizeof(user_t) );
//    users->users[0].user->key = 1995;
//    users->users[0].user->nickname = (char *)malloc( 10 *sizeof( char));
//    strcpy( users->users[0].user->nickname, "luca" );
//    printf( "%s - %d\n", users->users[0].user->nickname, users->users[0].user->key );
//    insert( users, "luca" );
////
//    insert( users, "lucia" );
//    insert( users, "roby" );
//    insert( users, "betta" );
//    insert( users, "luciano" );
//    insert( users, "licia" );

//
//    printf( "puppa\n" );
//
//
//	user_t *b = search( users, "betta" );
//	printf( "%s - %d\n", b->nickname, b->key );
//
//	b = search( users, "luca" );
//	printf( "%s - %d\n", b->nickname, b->key );
//
//	b = search( users, "roby" );
//	printf( "%s - %d\n", b->nickname, b->key );
//
//	b = search( users, "Fuffy" );
//	if( b != NULL )
//		printf( "%s - %d\n", b->nickname, b->key );
//	else
//		printf( "puppa" );
//
//	b = search( users, "lucia" );
//	printf( "%s - %d\n", b->nickname, b->key );
//
//	int c = removing( users, "luca" );
//	c = removing( users, "lucia" );
//	c = removing( users, "lucia" );

//	if( c == 1 )
//	{
//		b = search( users, "lucia" );
//		printf( "%s - %d\n", b->nickname, b->key );
//	}
//	else
//	{
//		printf( "%d!\n", c );
//	}

//	b = search( users, "lucia" );
//	printf( "%s - %d\n", b->nickname, b->key );



//	message_t *msg = NULL;
//	for( int i = 0; i < 30; i++ )
//	{
//		msg = (message_t *)malloc( sizeof( message_t ) );
//		setHeader( &msg->hdr, 200+i, "luca" );
//		char *tmp = (char *)malloc( 250 * sizeof( char ) );
//		strcpy( tmp, "CIAO MAMMA GUARDA COME MI DIVERTO" );
//		setData( &msg->data, b->nickname, tmp, strlen(tmp)+1 );
//		push( b->msg_hist, msg );
//	}
//
//	msg = b->msg_hist->tail->ptr;
//	printf( "%d\n", msg->hdr.op );
//	printf( "%s\n", msg->data.buf );
//    int r = 0;
//    while( r != 3 )
//    {
//    	sleep( 10 );
//    	r++;
//    }


//	printf( "\n\n\n\n" );
//    for( int i = 0; i < _MAX_CONN; i++ )
//	{
//    	user_t *tmp = NULL;
//		if( users->users[i].user != NULL )
//		{
//			 printf( "%s\n", users->users[i].user->nickname );
//		}
//		if( users->users[i].collision != NULL && users->users[i].collision->head != NULL )
//		{
//			node_t *nt = users->users[i].collision->head;
//			while( nt != NULL )
//			{
//				tmp = nt->ptr;
//				printf( "\t%s\n", tmp->nickname );
//				nt = nt->next;
//			}
//		}
//	}
	

